#pragma once

// @generated by torchgen/gen.py from Function.h

#include <ATen/Context.h>
#include <ATen/DeviceGuard.h>
#include <ATen/TensorUtils.h>
#include <ATen/TracerMode.h>
#include <ATen/core/Generator.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>



#include <ATen/ops/_nested_tensor_layer_norm_ops.h>

namespace at {


// aten::_nested_tensor_layer_norm.out(Tensor self, Tensor? weight, Tensor? bias, float eps, *, Tensor(a!) out) -> Tensor(a!)
inline at::Tensor & _nested_tensor_layer_norm_out(at::Tensor & out, const at::Tensor & self, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, double eps) {
    return at::_ops::_nested_tensor_layer_norm_out::call(self, weight, bias, eps, out);
}

// aten::_nested_tensor_layer_norm.out(Tensor self, Tensor? weight, Tensor? bias, float eps, *, Tensor(a!) out) -> Tensor(a!)
inline at::Tensor & _nested_tensor_layer_norm_outf(const at::Tensor & self, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, double eps, at::Tensor & out) {
    return at::_ops::_nested_tensor_layer_norm_out::call(self, weight, bias, eps, out);
}

}
